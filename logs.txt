package au.com.cfs.winged.core.servlets;

import au.com.cfs.winged.core.models.pojo.CardFundFamily;
import au.com.cfs.winged.core.services.CardFundService;
import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.servlets.annotations.SlingServletPaths;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.propertytypes.ServiceDescription;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

@Component(service = Servlet.class, immediate = true, name = "Fund & Performance Dropdown Servlet")
@SlingServletPaths(value = "/bin/list/fundPerformance")
@ServiceDescription("Fund & Performance Dropdown Servlet")
public class CardFundDropDownServlet extends SlingSafeMethodsServlet {
    private static final Logger LOGGER = LoggerFactory.getLogger(CardFundDropDownServlet.class);

    private static final long serialVersionUID = -4458186320139222562L;

    @Reference
    private transient CardFundService cardFundService;

    @Override
    protected void doGet(org.apache.sling.api.SlingHttpServletRequest request, org.apache.sling.api.SlingHttpServletResponse response) throws ServletException, IOException {
        try {
            // Retrieve card fund families from the service
            CardFundFamily[] cardFundFamilies = cardFundService.getCardFundFamilies();

            // Convert the array to a list for easier manipulation
            List<CardFundFamily> cardFundFamilyList = Arrays.asList(cardFundFamilies);

            // Here you can perform any additional processing or filtering of the card fund families as needed

            // For demonstration, let's log all attributes of each card fund family
            for (CardFundFamily cardFundFamily : cardFundFamilyList) {
                LOGGER.info("Marketing Name: {}", cardFundFamily.getMarketingName());
                LOGGER.info("APIR: {}", cardFundFamily.getApir());
                LOGGER.info("Effective Date: {}", cardFundFamily.getEffectiveDate());
                LOGGER.info("One Year: {}", cardFundFamily.getOneYear());
                LOGGER.info("Two Years: {}", cardFundFamily.getTwoYears());
                LOGGER.info("Three Years: {}", cardFundFamily.getThreeYears());
                LOGGER.info("Four Years: {}", cardFundFamily.getFourYears());
                LOGGER.info("Five Years: {}", cardFundFamily.getFiveYears());
                LOGGER.info("Seven Years: {}", cardFundFamily.getSevenYears());
                LOGGER.info("Ten Years: {}", cardFundFamily.getTenYears());
                LOGGER.info("Since Inception: {}", cardFundFamily.getSinceInception());
                LOGGER.info("Inception Date: {}", cardFundFamily.getInceptionDate());
                // Add more attributes as needed
            }

            // You can send the response back to the client if needed
            // For example, if you want to return JSON data, you can use response.getWriter().write(jsonData);
            // Or you can forward the request to a JSP or HTL script to render the data
            // For now, let's just set a success status code
            response.setStatus(HttpServletResponse.SC_OK);
        } catch (Exception e) {
            LOGGER.error("Error occurred while retrieving card fund families", e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    }
}
.......................................................
package au.com.cfs.winged.core.servlets;

import au.com.cfs.winged.core.models.pojo.CardFundFamily;
import au.com.cfs.winged.core.services.CardFundService;
import com.google.gson.Gson;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.servlets.annotations.SlingServletPaths;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.propertytypes.ServiceDescription;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

@Component(service = {Servlet.class}, immediate = true)
@SlingServletPaths(value = "/bin/jsonDataDropdown")
@ServiceDescription("Card Fund Drop Down Servlet")
public class CardFundDropDownServlet extends SlingSafeMethodsServlet {

    private static final Logger LOGGER = LoggerFactory.getLogger(CardFundDropDownServlet.class);

    private static final long serialVersionUID = -4458186320139222562L;

    @Reference
    private transient CardFundService cardFundService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws ServletException, IOException {
        try {
            // Retrieve card fund families from the service
            CardFundFamily[] cardFundFamilies = cardFundService.getCardFundFamilies();

            // Convert the array to a list for easier manipulation
            List<CardFundFamily> cardFundFamilyList = Arrays.asList(cardFundFamilies);

            // Log all attributes of each card fund family
            for (CardFundFamily cardFundFamily : cardFundFamilyList) {
                LOGGER.info("Marketing Name: {}", cardFundFamily.getMarketingName());
                LOGGER.info("APIR: {}", cardFundFamily.getApir());
                LOGGER.info("Effective Date: {}", cardFundFamily.getEffectiveDate());
                LOGGER.info("One Year: {}", cardFundFamily.getOneYear());
                LOGGER.info("Two Years: {}", cardFundFamily.getTwoYears());
                LOGGER.info("Three Years: {}", cardFundFamily.getThreeYears());
                LOGGER.info("Four Years: {}", cardFundFamily.getFourYears());
                LOGGER.info("Five Years: {}", cardFundFamily.getFiveYears());
                LOGGER.info("Seven Years: {}", cardFundFamily.getSevenYears());
                LOGGER.info("Ten Years: {}", cardFundFamily.getTenYears());
                LOGGER.info("Since Inception: {}", cardFundFamily.getSinceInception());
                LOGGER.info("Inception Date: {}", cardFundFamily.getInceptionDate());
            }

            // Convert the list to JSON and set the response content type
            Gson gson = new Gson();
            String jsonResponse = gson.toJson(cardFundFamilyList);
            response.setContentType("application/json");
            response.getWriter().write(jsonResponse);
            response.setStatus(HttpServletResponse.SC_OK);
        } catch (Exception e) {
            LOGGER.error("Error occurred while retrieving card fund families", e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    }
}

///////////////////////////////////////////////
package au.com.cfs.winged.core.servlets;

import au.com.cfs.winged.core.models.pojo.CardFundFamily;
import au.com.cfs.winged.core.services.CardFundService;
import com.google.gson.Gson;
import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.resource.ValueMapDecorator;
import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.models.annotations.Model;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.propertytypes.ServiceDescription;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.*;
import java.util.Base64;

@Component(service = { Servlet.class }, immediate = true, name = "Card Fund Drop Down Servlet")
@SlingServletResourceTypes(resourceTypes = "bin/list/fundPerformance", methods = HttpConstants.METHOD_GET)
@ServiceDescription("Card Fund Drop Down Servlet")
public class CardFundDropDownServlet extends SlingSafeMethodsServlet {

    private static final Logger LOGGER = LoggerFactory.getLogger(CardFundDropDownServlet.class);

    private static final long serialVersionUID = -4458186320139222562L;
    private static final String DATASOURCE = "datasource";
    private static final String APIR = "apir";
    private static final String MARKETING_NAME = "marketingName";
    private static final String EFFECTIVE_DATE = "effectiveDate";
    private static final String ONE_YEARS = "oneYear";
    private static final String TWO_YEARS = "twoYears";
    private static final String THREE_YEARS = "threeYears";
    private static final String FOUR_YEARS = "fourYears";
    private static final String FIVE_YEARS = "fiveYears";
    private static final String SEVEN_YEARS = "sevenYears";
    private static final String TEN_YEARS = "tenYears";
    private static final String SINCE_INCEPTION = "sinceInception";
    private static final String INCEPTION_DATE = "inceptionDate";

    @Reference
    private transient CardFundService cardFundService;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws ServletException, IOException {
        try {
            // Retrieve card fund families from the service
            CardFundFamily[] cardFundFamilies = cardFundService.getCardFundFamilies();

            // Convert the array to a list for easier manipulation
            List<CardFundFamily> cardFundFamilyList = Arrays.asList(cardFundFamilies);

            // Here you can perform any additional processing or filtering of the card fund families as needed

            // For demonstration, let's log all attributes of each card fund family
            for (CardFundFamily cardFundFamily : cardFundFamilyList) {
                LOGGER.info("Marketing Name: {}", cardFundFamily.getMarketingName());
                LOGGER.info("APIR: {}", cardFundFamily.getApir());
                LOGGER.info("Effective Date: {}", cardFundFamily.getEffectiveDate());
                LOGGER.info("One Year: {}", cardFundFamily.getOneYear());
                LOGGER.info("Two Years: {}", cardFundFamily.getTwoYears());
                LOGGER.info("Three Years: {}", cardFundFamily.getThreeYears());
                LOGGER.info("Four Years: {}", cardFundFamily.getFourYears());
                LOGGER.info("Five Years: {}", cardFundFamily.getFiveYears());
                LOGGER.info("Seven Years: {}", cardFundFamily.getSevenYears());
                LOGGER.info("Ten Years: {}", cardFundFamily.getTenYears());
                LOGGER.info("Since Inception: {}", cardFundFamily.getSinceInception());
                LOGGER.info("Inception Date: {}", cardFundFamily.getInceptionDate());
            }

            // Convert the list to JSON and set the response content type
            Gson gson = new Gson();
            String jsonResponse = gson.toJson(cardFundFamilyList);
            response.setContentType("application/json");
            response.getWriter().write(jsonResponse);
            response.setStatus(HttpServletResponse.SC_OK);
        } catch (Exception e) {
            LOGGER.error("Error occurred while retrieving card fund families", e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    }
}

..............................................
Cannot serve request to /bin/jsonDataDropdown in BundledScriptServlet (/libs/sling/servlet/errorhandler/404.jsp)

Request Progress:
      0 TIMER_START{Request Processing}
      2 COMMENT timer_end format is {<elapsed microseconds>,<timer name>} <optional message>
      8 LOG Method=GET, PathInfo=null
     10 TIMER_START{handleSecurity}
   1216 TIMER_END{1204,handleSecurity} authenticator org.apache.sling.auth.core.impl.SlingAuthenticator@f0b7fad returns true
   1529 TIMER_START{ResourceResolution}
   1695 TIMER_END{165,ResourceResolution} URI=/bin/jsonDataDropdown resolves to Resource=NonExistingResource, path=/bin/jsonDataDropdown
   1702 LOG Resource Path Info: SlingRequestPathInfo: path='/bin/jsonDataDropdown', selectorString='null', extension='null', suffix='null'
   1702 TIMER_START{ServletResolution}
   1705 TIMER_START{resolveServlet(/bin/jsonDataDropdown)}
   2407 LOG {0}: no servlet found
